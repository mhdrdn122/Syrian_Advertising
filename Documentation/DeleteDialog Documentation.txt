# وثيقة شرح مكون نافذة تأكيد الحذف (DeleteDialog)

## باللغة العربية

### فكرة الكود العامة
مكون `DeleteDialog` هو مكون React يعتمد على مكتبة `shadcn/ui` لإنشاء نافذة حوار (Dialog) تُستخدم لتأكيد عملية الحذف. يهدف هذا المكون إلى توفير واجهة مستخدم بسيطة وموحدة لتأكيد إجراء الحذف، مع دعم حالة التحميل (loading) وعرض رسائل الخطأ إذا حدثت. المكون مصمم ليكون مرنًا، حيث يمكن تخصيص العنوان، الوصف، نصوص الأزرار، وإدارة حالة النافذة باستخدام الخصائص (props). يدعم اللغة العربية (من اليمين إلى اليسار) ويُستخدم غالبًا مع طفرات (mutations) من مكتبات مثل `react-query` لتنفيذ عملية الحذف.

### الوسائط التي يستقبلها المكون ودور كل وسيط
المكون يستقبل الوسائط التالية عبر الـ `props`:
1. **`open` (نوع: boolean)**:
   - **الدور**: يتحكم في عرض النافذة (مفتوحة إذا كانت `true`، مغلقة إذا كانت `false`).
   - **مثال**: `open={openDelete}` في `BrokersContainer`.
2. **`onClose` (نوع: function)**:
   - **الدور**: دالة تُستدعى عند إغلاق النافذة (عبر زر "تجاهل" أو إغلاق النافذة).
   - **مثال**: `onClose={() => setOpenDelete(false)}`.
3. **`onConfirm` (نوع: function)**:
   - **الدور**: دالة تُستدعى عند النقر على زر "حذف" لتنفيذ عملية الحذف.
   - **مثال**: `onConfirm={onConfirmDelete}` حيث `onConfirmDelete` ينفذ طفرة `deleteBroker`.
4. **`loading` (نوع: boolean, اختياري)**:
   - **الدور**: يشير إلى ما إذا كانت عملية الحذف قيد التنفيذ. إذا كانت `true`، يُعطل زر "حذف" ويظهر رمز تحميل.
   - **القيمة الافتراضية**: `false`.
   - **مثال**: `loading={isDeleting}` في `BrokersContainer`.
5. **`error` (نوع: string, اختياري)**:
   - **الدور**: رسالة الخطأ التي تُعرض إذا فشلت عملية الحذف.
   - **مثال**: لم يُستخدم في `BrokersContainer` ولكنه مدعوم.
6. **`title` (نوع: string, اختياري)**:
   - **الدور**: عنوان النافذة المعروض في رأسها.
   - **القيمة الافتراضية**: `"تأكيد عملية الحذف"`.
   - **مثال**: يمكن تمرير `title="حذف الوسيط"` للتخصيص.
7. **`description` (نوع: string, اختياري)**:
   - **الدور**: وصف يظهر أسفل العنوان لتوضيح عملية الحذف.
   - **القيمة الافتراضية**: `"هل أنت متأكد من حذف هذا العنصر؟"`.
   - **مثال**: يمكن تمرير `description="هذا الإجراء لا يمكن التراجع عنه"` للتخصيص.
8. **`cancelText` (نوع: string, اختياري)**:
   - **الدور**: نص زر "تجاهل" (إلغاء).
   - **القيمة الافتراضية**: `"تجاهل"`.
   - **مثال**: يمكن تمرير `cancelText="إلغاء"` للتخصيص.
9. **`confirmText` (نوع: string, اختياري)**:
   - **الدور**: نص زر "حذف" (تأكيد).
   - **القيمة الافتراضية**: `"حذف"`.
   - **مثال**: يمكن تمرير `confirmText="تأكيد الحذف"` للتخصيص.

### شكل البيانات التي يستقبلها
- المكون لا يستقبل بيانات مباشرة (مثل كائنات بيانات)، بل يعتمد على الخصائص (props) للتحكم في السلوك والعرض.
- **البيانات المتعلقة بالحذف**: يتم تمريرها عادةً عبر دالة `onConfirm`. على سبيل المثال، في `BrokersContainer`، يتم تمرير `selectBroker.id` إلى طفرة `deleteBroker` داخل `onConfirmDelete`.

### شكل البيانات التي يرسلها
- المكون لا يرسل بيانات مباشرة، ولكنه يستدعي دالة `onConfirm` عند النقر على زر "حذف". هذه الدالة مسؤولة عن تنفيذ عملية الحذف.
- مثال من `BrokersContainer`:
  - عند استدعاء `onConfirmDelete`، يتم تنفيذ `deleteBroker(selectBroker.id)`، حيث `selectBroker.id` هو معرف العنصر المراد حذفه (مثل `"123"`).

### شكل البيانات الابتدائية
- المكون لا يتطلب بيانات ابتدائية للحقول لأنه لا يحتوي على نموذج إدخال بيانات. بدلاً من ذلك، يعتمد على:
  - **حالة النافذة**: يتم التحكم بها عبر `open` و`onClose`.
  - **معلومات الحذف**: يتم تمريرها خارجيًا عبر `onConfirm` (مثل معرف السجل).

### كيفية استخدام المكون
يُستخدم المكون لتأ

كيد عمليات الحذف في التطبيق. يتم تمرير الخصائص اللازمة للتحكم في النافذة وتنفيذ الحذف. مثال من `BrokersContainer`:
```javascript
<DeleteDialog
  open={openDelete}
  onClose={() => setOpenDelete(false)}
  onConfirm={onConfirmDelete}
  loading={isDeleting}
/>
```
- **السياق**: يُستخدم المكون مع جدول (مثل `DynamicTable`) حيث يتم تحديد سجل لحذفه (مثل وسيط في `BrokersContainer`)، ثم يتم فتح النافذة لتأكيد الحذف.
- **التكامل**: يُدمج عادةً مع طفرة حذف (مثل `useDeleteBrokerMutation`) لتنفيذ الحذف فعليًا.

### التوابع الموجودة ووظيفة كل منها
1. **`DeleteDialog`** (المكون الرئيسي):
   - **الوظيفة**: يعرض نافذة حوار لتأكيد الحذف مع أزرار "تجاهل" و"حذف"، ويدير حالة التحميل ورسائل الخطأ.
   - **المدخلات** (props):
     - `open`: للتحكم في عرض النافذة.
     - `onClose`: لإغلاق النافذة.
     - `onConfirm`: لتنفيذ الحذف.
     - `loading`: لحالة التحميل.
     - `error`: لعرض رسالة الخطأ.
     - `title`, `description`, `cancelText`, `confirmText`: لتخصيص النصوص.
   - **المخرجات**: لا يُرجع قيمة، بل يعرض النافذة ويستدعي `onConfirm` عند التأكيد.

---

## In English

### General Concept of the Code
The `DeleteDialog` component is a React component built using the `shadcn/ui` library to create a dialog for confirming deletion actions. Its purpose is to provide a simple, standardized user interface for confirming deletions, with support for loading states and error messages. The component is flexible, allowing customization of the title, description, button text, and dialog state via props. It supports right-to-left (RTL) layouts for Arabic and is typically used with mutations (e.g., from `react-query`) to perform the deletion.

### Props Received and Their Roles
The component accepts the following props:
1. **`open` (Type: boolean)**:
   - **Role**: Controls the visibility of the dialog (`true` to open, `false` to close).
   - **Example**: `open={openDelete}` in `BrokersContainer`.
2. **`onClose` (Type: function)**:
   - **Role**: A function called when the dialog is closed (via the "Cancel" button or dialog close).
   - **Example**: `onClose={() => setOpenDelete(false)}`.
3. **`onConfirm` (Type: function)**:
   - **Role**: A function called when the "Delete" button is clicked to execute the deletion.
   - **Example**: `onConfirm={onConfirmDelete}` where `onConfirmDelete` triggers the `deleteBroker` mutation.
4. **`loading` (Type: boolean, optional)**:
   - **Role**: Indicates whether the deletion is in progress. If `true`, disables the "Delete" button and shows a loading spinner.
   - **Default**: `false`.
   - **Example**: `loading={isDeleting}` in `BrokersContainer`.
5. **`error` (Type: string, optional)**:
   - **Role**: An error message displayed if the deletion fails.
   - **Example**: Not used in `BrokersContainer` but supported.
6. **`title` (Type: string, optional)**:
   - **Role**: The title displayed in the dialog header.
   - **Default**: `"تأكيد عملية الحذف"` (Confirm Deletion).
   - **Example**: Can pass `title="Delete Broker"` for customization.
7. **`description` (Type: string, optional)**:
   - **Role**: A description shown below the title to clarify the deletion action.
   - **Default**: `"هل أنت متأكد من حذف هذا العنصر؟"` (Are you sure you want to delete this item?).
   - **Example**: Can pass `description="This action cannot be undone"` for customization.
8. **`cancelText` (Type: string, optional)**:
   - **Role**: The text for the "Cancel" button.
   - **Default**: `"تجاهل"` (Ignore).
   - **Example**: Can pass `cancelText="Cancel"` for customization.
9. **`confirmText` (Type: string, optional)**:
   - **Role**: The text for the "Delete" button.
   - **Default**: `"حذف"` (Delete).
   - **Example**: Can pass `confirmText="Confirm Delete"` for customization.

### Shape of the Data Received
- The component does not receive direct data (e.g., data objects) but relies on props to control behavior and display.
- **Deletion-related Data**: Typically passed via the `onConfirm` function. For example, in `BrokersContainer`, `selectBroker.id` is passed to the `deleteBroker` mutation inside `onConfirmDelete`.

### Shape of the Data Sent
- The component does not send data directly but triggers the `onConfirm` function when the "Delete" button is clicked. This function is responsible for executing the deletion.
- Example from `BrokersContainer`:
  - When `onConfirmDelete` is called, it executes `deleteBroker(selectBroker.id)`, where `selectBroker.id` is the ID of the item to delete (e.g., `"123"`).

### Shape of Initial Data
- The component does not require initial data for fields since it does not include a data entry form. Instead, it relies on:
  - **Dialog State**: Controlled via `open` and `onClose`.
  - **Deletion Information**: Passed externally via `onConfirm` (e.g., the record ID).

### How to Use the Component
The component is used to confirm deletion actions in the application. Required props are passed to control the dialog and execute the deletion. Example from `BrokersContainer`:
```javascript
<DeleteDialog
  open={openDelete}
  onClose={() => setOpenDelete(false)}
  onConfirm={onConfirmDelete}
  loading={isDeleting}
/>
```
- **Context**: Typically used with a table (e.g., `DynamicTable`) where a record is selected for deletion (e.g., a broker in `BrokersContainer`), and the dialog is opened to confirm the action.
- **Integration**: Often integrated with a deletion mutation (e.g., `useDeleteBrokerMutation`) to perform the actual deletion.

### Available Functions and Their Purposes
1. **`DeleteDialog`** (Main Component):
   - **Purpose**: Displays a dialog for confirming deletion with "Cancel" and "Delete" buttons, managing loading states and error messages.
   - **Inputs** (props):
     - `open`: Controls dialog visibility.
     - `onClose`: Closes the dialog.
     - `onConfirm`: Executes the deletion.
     - `loading`: Indicates loading state.
     - `error`: Displays error message.
     - `title`, `description`, `cancelText`, `confirmText`: Customize text.
   - **Output**: Does not return a value; displays the dialog and triggers `onConfirm` upon confirmation.